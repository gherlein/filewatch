#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <linux/inotify.h>


#define QUEUE_LEN 128

void print_event(struct inotify_event *event)
{
  if(event->len)
  {
    printf("%s - ",event->name);
  }
  if(event->mask & IN_ACCESS) printf("IN_ACCESS ");
  if(event->mask & IN_MODIFY) printf("IN_MODIFY ");
  if(event->mask & IN_CLOSE_WRITE) printf("IN_CLOSE_WRITE ");
  if(event->mask & IN_CLOSE_NOWRITE) printf("IN_CLOSE_NOWRITE ");
  if(event->mask & IN_OPEN) printf("IN_OPEN ");
  if(event->mask & IN_MOVED_FROM) printf("IN_MOVED_FROM ");
  if(event->mask & IN_MOVED_TO) printf("IN_MOVED_TO ");
  if(event->mask & IN_DELETE_SELF) printf("IN_DELETE_SELF ");
  if(event->mask & IN_MOVE_SELF) printf("IN_MOVE_SELF ");
  printf("\n");
  return;
}


int main(void)
{
  int fd;
  ssize_t len,i;
  struct inotify_event equeue[QUEUE_LEN];
  memset(equeue,0,sizeof(struct inotify_event)*QUEUE_LEN);
  
  fd=inotify_init();
  if(fd==-1)
  {
    perror("inotify_init");
    exit(EXIT_FAILURE);
  }

  
  inotify_add_watch(fd,"./test.txt",IN_CLOSE_WRITE);

  len = read (fd,equeue,QUEUE_LEN);

  i=0;
  while(i<len)
  {
    struct inotify_event *event = (struct inotify_event*) &equeue[i];
    if(event->mask && IN_CLOSE_WRITE)
    {
      print_event(event);
    }
    i++;
  }
  inotify_rm_watch(fd);
}



